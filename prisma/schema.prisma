generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(cuid())
  email           String     @unique
  password        String
  fullName        String
  avatarUrl       String?
  role            Role       @default(USER)
  emailVerifiedAt DateTime?
  createdAt       Int
  updatedAt       Int
  banned          Boolean    @default(false)
  facilities      Facility[] @relation("OwnerFacilities")
  bookings        Booking[]
  reviews         Review[]
}

model Facility {
  id                   String         @id @default(cuid())
  ownerId              String
  name                 String
  address              String
  city                 String
  startingPricePerHour Int
  rating               Float?
  status               FacilityStatus @default(PENDING)
  createdAt            Int
  updatedAt            Int

  owner   User     @relation("OwnerFacilities", fields: [ownerId], references: [id])
  courts  Court[]
  reviews Review[]

  @@index([city])
  @@index([status])
}

model Court {
  id           String @id @default(cuid())
  facilityId   String
  name         String
  sport        Sport
  pricePerHour Int
  createdAt    Int
  updatedAt    Int

  facility Facility  @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  bookings Booking[]

  @@unique([facilityId, name])
  @@index([sport])
}

model Booking {
  id         String        @id @default(cuid())
  userId     String
  courtId    String
  startsAt   DateTime
  endsAt     DateTime
  totalPrice Int
  status     BookingStatus @default(PENDING_PAYMENT)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  court Court @relation(fields: [courtId], references: [id], onDelete: Cascade)

  @@unique([courtId, startsAt, endsAt])
  @@index([userId, startsAt])
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  facilityId String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  facility Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)

  @@unique([userId, facilityId])
  @@index([facilityId])
}

enum Role {
  USER
  OWNER
  ADMIN
}

enum FacilityStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Sport {
  BADMINTON
  FOOTBALL
  TENNIS
  TABLE_TENNIS
  CRICKET
}

enum BookingStatus {
  PENDING_PAYMENT
  CONFIRMED
  CANCELLED
  COMPLETED
}
